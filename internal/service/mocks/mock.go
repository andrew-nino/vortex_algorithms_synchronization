// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=mocks/mock.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	entity "github.com/andrew-nino/vtx_algorithms_synchronization/entity"
	deployment "github.com/andrew-nino/vtx_algorithms_synchronization/internal/deployment"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthorization is a mock of Authorization interface.
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization.
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance.
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// CreateManager mocks base method.
func (m *MockAuthorization) CreateManager(user entity.Manager) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateManager", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateManager indicates an expected call of CreateManager.
func (mr *MockAuthorizationMockRecorder) CreateManager(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateManager", reflect.TypeOf((*MockAuthorization)(nil).CreateManager), user)
}

// ParseToken mocks base method.
func (m *MockAuthorization) ParseToken(token string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", token)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockAuthorizationMockRecorder) ParseToken(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockAuthorization)(nil).ParseToken), token)
}

// SignIn mocks base method.
func (m *MockAuthorization) SignIn(username, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockAuthorizationMockRecorder) SignIn(username, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockAuthorization)(nil).SignIn), username, password)
}

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// AddClient mocks base method.
func (m *MockClient) AddClient(client entity.Client) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddClient", client)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddClient indicates an expected call of AddClient.
func (mr *MockClientMockRecorder) AddClient(client any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClient", reflect.TypeOf((*MockClient)(nil).AddClient), client)
}

// DeleteClient mocks base method.
func (m *MockClient) DeleteClient(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClient", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClient indicates an expected call of DeleteClient.
func (mr *MockClientMockRecorder) DeleteClient(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClient", reflect.TypeOf((*MockClient)(nil).DeleteClient), id)
}

// UpdateClient mocks base method.
func (m *MockClient) UpdateClient(client entity.Client) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClient", client)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClient indicates an expected call of UpdateClient.
func (mr *MockClientMockRecorder) UpdateClient(client any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClient", reflect.TypeOf((*MockClient)(nil).UpdateClient), client)
}

// MockAlgorithmStatus is a mock of AlgorithmStatus interface.
type MockAlgorithmStatus struct {
	ctrl     *gomock.Controller
	recorder *MockAlgorithmStatusMockRecorder
}

// MockAlgorithmStatusMockRecorder is the mock recorder for MockAlgorithmStatus.
type MockAlgorithmStatusMockRecorder struct {
	mock *MockAlgorithmStatus
}

// NewMockAlgorithmStatus creates a new mock instance.
func NewMockAlgorithmStatus(ctrl *gomock.Controller) *MockAlgorithmStatus {
	mock := &MockAlgorithmStatus{ctrl: ctrl}
	mock.recorder = &MockAlgorithmStatusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAlgorithmStatus) EXPECT() *MockAlgorithmStatusMockRecorder {
	return m.recorder
}

// CheckAlgorithmStatus mocks base method.
func (m *MockAlgorithmStatus) CheckAlgorithmStatus(deploy *deployment.Deploy) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CheckAlgorithmStatus", deploy)
}

// CheckAlgorithmStatus indicates an expected call of CheckAlgorithmStatus.
func (mr *MockAlgorithmStatusMockRecorder) CheckAlgorithmStatus(deploy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAlgorithmStatus", reflect.TypeOf((*MockAlgorithmStatus)(nil).CheckAlgorithmStatus), deploy)
}

// UpdateStatus mocks base method.
func (m *MockAlgorithmStatus) UpdateStatus(status entity.AlgorithmStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockAlgorithmStatusMockRecorder) UpdateStatus(status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockAlgorithmStatus)(nil).UpdateStatus), status)
}
